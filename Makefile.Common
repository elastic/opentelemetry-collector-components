SHELL = /usr/bin/env bash

GOTEST_TIMEOUT?=240s
GOTEST_OPT?= -race -timeout $(GOTEST_TIMEOUT)
GOCMD?= go
GOTEST=$(GOCMD) test
GOOS := $(shell $(GOCMD) env GOOS)
GOARCH := $(shell $(GOCMD) env GOARCH)


# SRC_ROOT is the top of the source tree.
SRC_ROOT := $(shell git rev-parse --show-toplevel)

TOOLS_MOD_DIR   := $(SRC_ROOT)/internal/tools
TOOLS_BIN_DIR   := $(SRC_ROOT)/.tools
TOOLS_MOD_REGEX := "\s+_\s+\".*\""
TOOLS_PKG_NAMES := $(shell grep -E $(TOOLS_MOD_REGEX) < $(TOOLS_MOD_DIR)/tools.go | tr -d " _\"" | grep -vE '/v[0-9]+$$')
TOOLS_BIN_NAMES := $(addprefix $(TOOLS_BIN_DIR)/, $(notdir $(shell echo $(TOOLS_PKG_NAMES))))

LINT         := $(TOOLS_BIN_DIR)/golangci-lint
MISSPELL     := $(TOOLS_BIN_DIR)/misspell
MDATAGEN     := $(TOOLS_BIN_DIR)/mdatagen
GOVULNCHECK  := $(TOOLS_BIN_DIR)/govulncheck
PORTO        := $(TOOLS_BIN_DIR)/porto
BUILDER      := $(TOOLS_BIN_DIR)/builder

.PHONY: install-tools
install-tools: $(TOOLS_BIN_NAMES)

$(TOOLS_BIN_DIR):
	mkdir -p $@

$(TOOLS_BIN_NAMES): $(TOOLS_BIN_DIR) $(TOOLS_MOD_DIR)/go.mod
	cd $(TOOLS_MOD_DIR) && $(GOCMD) build -o $@ -trimpath $(filter %/$(notdir $@),$(TOOLS_PKG_NAMES))

.PHONY: test
test:
	$(GOTEST) $(GOTEST_OPT) ./...

.PHONY: fmt
fmt:
	gofmt -w -s ./

.PHONY: tidy
tidy:
	rm -fr go.sum
	$(GOCMD) mod tidy -compat=1.21.0

.PHONY: misspell
misspell: $(TOOLS_BIN_DIR)/misspell
	@echo "running $(MISSPELL)"
	@$(MISSPELL_CMD)

.PHONY: lint
lint: $(LINT) misspell
	$(LINT) run --allow-parallel-runners --verbose --build-tags integration --timeout=30m --path-prefix $(shell basename "$(CURDIR)")

.PHONY: generate
generate: $(MDATAGEN)
	$(GOCMD) generate ./...

.PHONY: moddownload
moddownload:
	$(GOCMD) mod download

.PHONY: porto
porto: $(PORTO)
	$(PORTO) -w --include-internal --skip-dirs "^cmd$$" ./

.PHONY: govulncheck
govulncheck: $(GOVULNCHECK)
	$(GOVULNCHECK) ./...
