// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"context"
	"errors"
	"sync"

	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/metric/embedded"
	"go.opentelemetry.io/otel/trace"

	"go.opentelemetry.io/collector/component"
)

func Meter(settings component.TelemetrySettings) metric.Meter {
	return settings.MeterProvider.Meter("github.com/elastic/opentelemetry-collector-components/processor/lsmintervalprocessor")
}

func Tracer(settings component.TelemetrySettings) trace.Tracer {
	return settings.TracerProvider.Tracer("github.com/elastic/opentelemetry-collector-components/processor/lsmintervalprocessor")
}

// TelemetryBuilder provides an interface for components to report telemetry
// as defined in metadata and user config.
type TelemetryBuilder struct {
	meter                                     metric.Meter
	mu                                        sync.Mutex
	registrations                             []metric.Registration
	LsmintervalExportedBytes                  metric.Int64Counter
	LsmintervalExportedDataPoints             metric.Int64Counter
	LsmintervalPebbleCompactedBytesRead       metric.Int64ObservableCounter
	LsmintervalPebbleCompactedBytesWritten    metric.Int64ObservableCounter
	LsmintervalPebbleCompactions              metric.Int64ObservableCounter
	LsmintervalPebbleFlushedBytes             metric.Int64ObservableCounter
	LsmintervalPebbleFlushes                  metric.Int64ObservableCounter
	LsmintervalPebbleIngestedBytes            metric.Int64ObservableCounter
	LsmintervalPebbleKeysTombstones           metric.Int64ObservableGauge
	LsmintervalPebbleMarkedForCompactionFiles metric.Int64ObservableGauge
	LsmintervalPebblePendingCompaction        metric.Int64ObservableGauge
	LsmintervalPebbleReadAmplification        metric.Int64ObservableGauge
	LsmintervalPebbleReadersMemory            metric.Int64ObservableGauge
	LsmintervalPebbleSstables                 metric.Int64ObservableGauge
	LsmintervalPebbleTotalDiskUsage           metric.Int64ObservableGauge
	LsmintervalPebbleTotalMemtableSize        metric.Int64ObservableGauge
	LsmintervalProcessedBytes                 metric.Int64Counter
	LsmintervalProcessedDataPoints            metric.Int64Counter
}

// TelemetryBuilderOption applies changes to default builder.
type TelemetryBuilderOption interface {
	apply(*TelemetryBuilder)
}

type telemetryBuilderOptionFunc func(mb *TelemetryBuilder)

func (tbof telemetryBuilderOptionFunc) apply(mb *TelemetryBuilder) {
	tbof(mb)
}

// RegisterLsmintervalPebbleCompactedBytesReadCallback sets callback for observable LsmintervalPebbleCompactedBytesRead metric.
func (builder *TelemetryBuilder) RegisterLsmintervalPebbleCompactedBytesReadCallback(cb metric.Int64Callback) error {
	reg, err := builder.meter.RegisterCallback(func(ctx context.Context, o metric.Observer) error {
		cb(ctx, &observerInt64{inst: builder.LsmintervalPebbleCompactedBytesRead, obs: o})
		return nil
	}, builder.LsmintervalPebbleCompactedBytesRead)
	if err != nil {
		return err
	}
	builder.mu.Lock()
	defer builder.mu.Unlock()
	builder.registrations = append(builder.registrations, reg)
	return nil
}

// RegisterLsmintervalPebbleCompactedBytesWrittenCallback sets callback for observable LsmintervalPebbleCompactedBytesWritten metric.
func (builder *TelemetryBuilder) RegisterLsmintervalPebbleCompactedBytesWrittenCallback(cb metric.Int64Callback) error {
	reg, err := builder.meter.RegisterCallback(func(ctx context.Context, o metric.Observer) error {
		cb(ctx, &observerInt64{inst: builder.LsmintervalPebbleCompactedBytesWritten, obs: o})
		return nil
	}, builder.LsmintervalPebbleCompactedBytesWritten)
	if err != nil {
		return err
	}
	builder.mu.Lock()
	defer builder.mu.Unlock()
	builder.registrations = append(builder.registrations, reg)
	return nil
}

// RegisterLsmintervalPebbleCompactionsCallback sets callback for observable LsmintervalPebbleCompactions metric.
func (builder *TelemetryBuilder) RegisterLsmintervalPebbleCompactionsCallback(cb metric.Int64Callback) error {
	reg, err := builder.meter.RegisterCallback(func(ctx context.Context, o metric.Observer) error {
		cb(ctx, &observerInt64{inst: builder.LsmintervalPebbleCompactions, obs: o})
		return nil
	}, builder.LsmintervalPebbleCompactions)
	if err != nil {
		return err
	}
	builder.mu.Lock()
	defer builder.mu.Unlock()
	builder.registrations = append(builder.registrations, reg)
	return nil
}

// RegisterLsmintervalPebbleFlushedBytesCallback sets callback for observable LsmintervalPebbleFlushedBytes metric.
func (builder *TelemetryBuilder) RegisterLsmintervalPebbleFlushedBytesCallback(cb metric.Int64Callback) error {
	reg, err := builder.meter.RegisterCallback(func(ctx context.Context, o metric.Observer) error {
		cb(ctx, &observerInt64{inst: builder.LsmintervalPebbleFlushedBytes, obs: o})
		return nil
	}, builder.LsmintervalPebbleFlushedBytes)
	if err != nil {
		return err
	}
	builder.mu.Lock()
	defer builder.mu.Unlock()
	builder.registrations = append(builder.registrations, reg)
	return nil
}

// RegisterLsmintervalPebbleFlushesCallback sets callback for observable LsmintervalPebbleFlushes metric.
func (builder *TelemetryBuilder) RegisterLsmintervalPebbleFlushesCallback(cb metric.Int64Callback) error {
	reg, err := builder.meter.RegisterCallback(func(ctx context.Context, o metric.Observer) error {
		cb(ctx, &observerInt64{inst: builder.LsmintervalPebbleFlushes, obs: o})
		return nil
	}, builder.LsmintervalPebbleFlushes)
	if err != nil {
		return err
	}
	builder.mu.Lock()
	defer builder.mu.Unlock()
	builder.registrations = append(builder.registrations, reg)
	return nil
}

// RegisterLsmintervalPebbleIngestedBytesCallback sets callback for observable LsmintervalPebbleIngestedBytes metric.
func (builder *TelemetryBuilder) RegisterLsmintervalPebbleIngestedBytesCallback(cb metric.Int64Callback) error {
	reg, err := builder.meter.RegisterCallback(func(ctx context.Context, o metric.Observer) error {
		cb(ctx, &observerInt64{inst: builder.LsmintervalPebbleIngestedBytes, obs: o})
		return nil
	}, builder.LsmintervalPebbleIngestedBytes)
	if err != nil {
		return err
	}
	builder.mu.Lock()
	defer builder.mu.Unlock()
	builder.registrations = append(builder.registrations, reg)
	return nil
}

// RegisterLsmintervalPebbleKeysTombstonesCallback sets callback for observable LsmintervalPebbleKeysTombstones metric.
func (builder *TelemetryBuilder) RegisterLsmintervalPebbleKeysTombstonesCallback(cb metric.Int64Callback) error {
	reg, err := builder.meter.RegisterCallback(func(ctx context.Context, o metric.Observer) error {
		cb(ctx, &observerInt64{inst: builder.LsmintervalPebbleKeysTombstones, obs: o})
		return nil
	}, builder.LsmintervalPebbleKeysTombstones)
	if err != nil {
		return err
	}
	builder.mu.Lock()
	defer builder.mu.Unlock()
	builder.registrations = append(builder.registrations, reg)
	return nil
}

// RegisterLsmintervalPebbleMarkedForCompactionFilesCallback sets callback for observable LsmintervalPebbleMarkedForCompactionFiles metric.
func (builder *TelemetryBuilder) RegisterLsmintervalPebbleMarkedForCompactionFilesCallback(cb metric.Int64Callback) error {
	reg, err := builder.meter.RegisterCallback(func(ctx context.Context, o metric.Observer) error {
		cb(ctx, &observerInt64{inst: builder.LsmintervalPebbleMarkedForCompactionFiles, obs: o})
		return nil
	}, builder.LsmintervalPebbleMarkedForCompactionFiles)
	if err != nil {
		return err
	}
	builder.mu.Lock()
	defer builder.mu.Unlock()
	builder.registrations = append(builder.registrations, reg)
	return nil
}

// RegisterLsmintervalPebblePendingCompactionCallback sets callback for observable LsmintervalPebblePendingCompaction metric.
func (builder *TelemetryBuilder) RegisterLsmintervalPebblePendingCompactionCallback(cb metric.Int64Callback) error {
	reg, err := builder.meter.RegisterCallback(func(ctx context.Context, o metric.Observer) error {
		cb(ctx, &observerInt64{inst: builder.LsmintervalPebblePendingCompaction, obs: o})
		return nil
	}, builder.LsmintervalPebblePendingCompaction)
	if err != nil {
		return err
	}
	builder.mu.Lock()
	defer builder.mu.Unlock()
	builder.registrations = append(builder.registrations, reg)
	return nil
}

// RegisterLsmintervalPebbleReadAmplificationCallback sets callback for observable LsmintervalPebbleReadAmplification metric.
func (builder *TelemetryBuilder) RegisterLsmintervalPebbleReadAmplificationCallback(cb metric.Int64Callback) error {
	reg, err := builder.meter.RegisterCallback(func(ctx context.Context, o metric.Observer) error {
		cb(ctx, &observerInt64{inst: builder.LsmintervalPebbleReadAmplification, obs: o})
		return nil
	}, builder.LsmintervalPebbleReadAmplification)
	if err != nil {
		return err
	}
	builder.mu.Lock()
	defer builder.mu.Unlock()
	builder.registrations = append(builder.registrations, reg)
	return nil
}

// RegisterLsmintervalPebbleReadersMemoryCallback sets callback for observable LsmintervalPebbleReadersMemory metric.
func (builder *TelemetryBuilder) RegisterLsmintervalPebbleReadersMemoryCallback(cb metric.Int64Callback) error {
	reg, err := builder.meter.RegisterCallback(func(ctx context.Context, o metric.Observer) error {
		cb(ctx, &observerInt64{inst: builder.LsmintervalPebbleReadersMemory, obs: o})
		return nil
	}, builder.LsmintervalPebbleReadersMemory)
	if err != nil {
		return err
	}
	builder.mu.Lock()
	defer builder.mu.Unlock()
	builder.registrations = append(builder.registrations, reg)
	return nil
}

// RegisterLsmintervalPebbleSstablesCallback sets callback for observable LsmintervalPebbleSstables metric.
func (builder *TelemetryBuilder) RegisterLsmintervalPebbleSstablesCallback(cb metric.Int64Callback) error {
	reg, err := builder.meter.RegisterCallback(func(ctx context.Context, o metric.Observer) error {
		cb(ctx, &observerInt64{inst: builder.LsmintervalPebbleSstables, obs: o})
		return nil
	}, builder.LsmintervalPebbleSstables)
	if err != nil {
		return err
	}
	builder.mu.Lock()
	defer builder.mu.Unlock()
	builder.registrations = append(builder.registrations, reg)
	return nil
}

// RegisterLsmintervalPebbleTotalDiskUsageCallback sets callback for observable LsmintervalPebbleTotalDiskUsage metric.
func (builder *TelemetryBuilder) RegisterLsmintervalPebbleTotalDiskUsageCallback(cb metric.Int64Callback) error {
	reg, err := builder.meter.RegisterCallback(func(ctx context.Context, o metric.Observer) error {
		cb(ctx, &observerInt64{inst: builder.LsmintervalPebbleTotalDiskUsage, obs: o})
		return nil
	}, builder.LsmintervalPebbleTotalDiskUsage)
	if err != nil {
		return err
	}
	builder.mu.Lock()
	defer builder.mu.Unlock()
	builder.registrations = append(builder.registrations, reg)
	return nil
}

// RegisterLsmintervalPebbleTotalMemtableSizeCallback sets callback for observable LsmintervalPebbleTotalMemtableSize metric.
func (builder *TelemetryBuilder) RegisterLsmintervalPebbleTotalMemtableSizeCallback(cb metric.Int64Callback) error {
	reg, err := builder.meter.RegisterCallback(func(ctx context.Context, o metric.Observer) error {
		cb(ctx, &observerInt64{inst: builder.LsmintervalPebbleTotalMemtableSize, obs: o})
		return nil
	}, builder.LsmintervalPebbleTotalMemtableSize)
	if err != nil {
		return err
	}
	builder.mu.Lock()
	defer builder.mu.Unlock()
	builder.registrations = append(builder.registrations, reg)
	return nil
}

type observerInt64 struct {
	embedded.Int64Observer
	inst metric.Int64Observable
	obs  metric.Observer
}

func (oi *observerInt64) Observe(value int64, opts ...metric.ObserveOption) {
	oi.obs.ObserveInt64(oi.inst, value, opts...)
}

// Shutdown unregister all registered callbacks for async instruments.
func (builder *TelemetryBuilder) Shutdown() {
	builder.mu.Lock()
	defer builder.mu.Unlock()
	for _, reg := range builder.registrations {
		reg.Unregister()
	}
}

// NewTelemetryBuilder provides a struct with methods to update all internal telemetry
// for a component
func NewTelemetryBuilder(settings component.TelemetrySettings, options ...TelemetryBuilderOption) (*TelemetryBuilder, error) {
	builder := TelemetryBuilder{}
	for _, op := range options {
		op.apply(&builder)
	}
	builder.meter = Meter(settings)
	var err, errs error
	builder.LsmintervalExportedBytes, err = builder.meter.Int64Counter(
		"otelcol_lsminterval.exported_bytes",
		metric.WithDescription("The size in bytes of metric data points exported by the processor."),
		metric.WithUnit("By"),
	)
	errs = errors.Join(errs, err)
	builder.LsmintervalExportedDataPoints, err = builder.meter.Int64Counter(
		"otelcol_lsminterval.exported_data_points",
		metric.WithDescription("The count of metric data points exported by the processor."),
		metric.WithUnit("{count}"),
	)
	errs = errors.Join(errs, err)
	builder.LsmintervalPebbleCompactedBytesRead, err = builder.meter.Int64ObservableCounter(
		"otelcol_lsminterval.pebble_compacted_bytes_read",
		metric.WithDescription("The size in bytes read by pebble during compaction."),
		metric.WithUnit("By"),
	)
	errs = errors.Join(errs, err)
	builder.LsmintervalPebbleCompactedBytesWritten, err = builder.meter.Int64ObservableCounter(
		"otelcol_lsminterval.pebble_compacted_bytes_written",
		metric.WithDescription("The size in bytes written by pebble during compaction."),
		metric.WithUnit("By"),
	)
	errs = errors.Join(errs, err)
	builder.LsmintervalPebbleCompactions, err = builder.meter.Int64ObservableCounter(
		"otelcol_lsminterval.pebble_compactions",
		metric.WithDescription("The number of pebble table compactions."),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	builder.LsmintervalPebbleFlushedBytes, err = builder.meter.Int64ObservableCounter(
		"otelcol_lsminterval.pebble_flushed_bytes",
		metric.WithDescription("The size in bytes written by pebble during flush."),
		metric.WithUnit("By"),
	)
	errs = errors.Join(errs, err)
	builder.LsmintervalPebbleFlushes, err = builder.meter.Int64ObservableCounter(
		"otelcol_lsminterval.pebble_flushes",
		metric.WithDescription("The number of pebble memtable flushes to disk."),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	builder.LsmintervalPebbleIngestedBytes, err = builder.meter.Int64ObservableCounter(
		"otelcol_lsminterval.pebble_ingested_bytes",
		metric.WithDescription("The size in bytes ingested to pebble."),
		metric.WithUnit("By"),
	)
	errs = errors.Join(errs, err)
	builder.LsmintervalPebbleKeysTombstones, err = builder.meter.Int64ObservableGauge(
		"otelcol_lsminterval.pebble_keys_tombstones",
		metric.WithDescription("The approximate number of delete keys across the pebble storage engine."),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	builder.LsmintervalPebbleMarkedForCompactionFiles, err = builder.meter.Int64ObservableGauge(
		"otelcol_lsminterval.pebble_marked_for_compaction_files",
		metric.WithDescription("The current number of pebble SSTables marked for compaction."),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	builder.LsmintervalPebblePendingCompaction, err = builder.meter.Int64ObservableGauge(
		"otelcol_lsminterval.pebble_pending_compaction",
		metric.WithDescription("The estimated size in bytes of pending compaction in pebble."),
		metric.WithUnit("By"),
	)
	errs = errors.Join(errs, err)
	builder.LsmintervalPebbleReadAmplification, err = builder.meter.Int64ObservableGauge(
		"otelcol_lsminterval.pebble_read_amplification",
		metric.WithDescription("The current pebble db read amplification."),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	builder.LsmintervalPebbleReadersMemory, err = builder.meter.Int64ObservableGauge(
		"otelcol_lsminterval.pebble_readers_memory",
		metric.WithDescription("The estimated size in bytes of memory used by pebble index and filter blocks."),
		metric.WithUnit("By"),
	)
	errs = errors.Join(errs, err)
	builder.LsmintervalPebbleSstables, err = builder.meter.Int64ObservableGauge(
		"otelcol_lsminterval.pebble_sstables",
		metric.WithDescription("The current number of pebble storage engine SSTables."),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	builder.LsmintervalPebbleTotalDiskUsage, err = builder.meter.Int64ObservableGauge(
		"otelcol_lsminterval.pebble_total_disk_usage",
		metric.WithDescription("The current size in bytes of disk used by pebble, including live and obsolete files."),
		metric.WithUnit("By"),
	)
	errs = errors.Join(errs, err)
	builder.LsmintervalPebbleTotalMemtableSize, err = builder.meter.Int64ObservableGauge(
		"otelcol_lsminterval.pebble_total_memtable_size",
		metric.WithDescription("The current size in bytes of pebble memtable."),
		metric.WithUnit("By"),
	)
	errs = errors.Join(errs, err)
	builder.LsmintervalProcessedBytes, err = builder.meter.Int64Counter(
		"otelcol_lsminterval.processed_bytes",
		metric.WithDescription("The size in bytes of metric data points processed by the processor."),
		metric.WithUnit("By"),
	)
	errs = errors.Join(errs, err)
	builder.LsmintervalProcessedDataPoints, err = builder.meter.Int64Counter(
		"otelcol_lsminterval.processed_data_points",
		metric.WithDescription("The count of metric data points processed by the processor."),
		metric.WithUnit("{count}"),
	)
	errs = errors.Join(errs, err)
	return &builder, errs
}
