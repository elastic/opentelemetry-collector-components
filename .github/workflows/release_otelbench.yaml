run-name: release-otelbench
name: Release otelbench docker image on elastic container library

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version of the otelbench image to release, should follow format "vN.N.N".
        required: true
  push:
    branches:
      - main
    paths:
      - ./loadgen/cmd/otelbench/Makefile

permissions:
  contents: read

jobs:
  check-release:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-new-version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Checks if release is required.
        id: get-new-version
        run: ./scripts/check_release.sh "${{ github.event_name }}" "${{ github.event.inputs.version }}"

  update-changelog:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs:
      - check-release
    if: needs.check-release.result == 'success'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Get token
        id: get_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.OBS_AUTOMATION_APP_ID }}
          private_key: ${{ secrets.OBS_AUTOMATION_APP_PEM }}
          permissions: >-
            {
              "contents": "write",
              "pull_requests": "write"
            }

      - uses: elastic/oblt-actions/git/setup@v1
        with:
          github-token: ${{ steps.get_token.outputs.token }}

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: 'false'

      - name: Cache go tools
        id: go-tools-cache
        uses: actions/cache@v4
        with:
          path: ./.tools
          key: go-tools-${{ runner.os }}-${{ hashFiles('internal/tools/go.sum') }}

      - name: Add .tools to PATH
        run: echo "$GITHUB_WORKSPACE/.tools" >> $GITHUB_PATH

      # If there is no cache with the go tools,
      # install them. We need the changelog
      # tool for this workflow to work.
      - name: Install tools
        if: steps.go-tools-cache.outputs.cache-hit != 'true'
        run: |
          make install-tools

      - name: Update CHANGELOG and open PR.
        run: ./scripts/create_pr.sh "${{ needs.check-release.outputs.version }}" "${{ github.event_name }}"
        env:
          GH_TOKEN: ${{ steps.get_token.outputs.token }}

  release-otelbench:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs:
      - check-release
    if: needs.check-release.result == 'success'
    permissions:
      contents: write
    env:
      ELASTIC_REGISTRY: "docker.elastic.co/observability-ci"
      IMAGE_NAME: "otelbench"
    steps:
      - uses: actions/checkout@v4

      - name: Login to Elastic container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ELASTIC_REGISTRY }}
          username: ${{ secrets.ELASTIC_DOCKER_USERNAME }}
          password: ${{ secrets.ELASTIC_DOCKER_PASSWORD }}

      - uses: ko-build/setup-ko@v0.8
        env:
          KO_DOCKER_REPO: ${{ env.ELASTIC_REGISTRY }}

      - name: Build container image and push to Elastic registry
        working-directory: ./loadgen/cmd/otelbench
        run: |
          export KO_DOCKER_REPO=${{ env.ELASTIC_REGISTRY }}
          local_platform="linux/$(go env GOARCH)"
          KO_IMAGE=$(ko build --platform=$local_platform)
          docker tag "$KO_IMAGE" "${{ env.ELASTIC_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-release.outputs.version }}"